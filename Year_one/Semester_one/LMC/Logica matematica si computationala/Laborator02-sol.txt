Exercitiul 1: distanta dintre doua puncte
Definiti un predicat distance/3 pentru a calcula distanta dintre doua
puncte ıntr-un plan 2-dimensional. Punctele sunt date ca perechi de
coordonate.

distance((A,B),(C,D),X) :- X is sqrt((C-A)**2 + (D-B)**2).

Exemple:
?- distance((0,0), (3,4), X).
X = 5.0
?- distance((-2.5,1), (3.5,-4), X).
X = 7.810249675906654


Exercit¸iul 2: numerele Fibonacci
Scrieti un predicat fib/2 pentru a calcula, pentru orice n, numarul de pe
pozitia n din sirul Fibonacci. Secventa de numere Fibonacci este definita
prin: F0 := 1, F1 := 1, iar pentru orice n ≥ 2,
Fn := Fn−1 + Fn−2.


fib(0,1).
fib(1,1).
fib(N,X) :- 2 =< N, M is N - 1, fib(M, Y), P is N - 2, fib(P, Z), X is Y + Z.

fibo(0,0,1).
fibo(1,1,1).
fibo(N,Z,X) :- 2 =< N, M is N-1, fibo(M,Y,Z), X is Y + Z.

fibg(N,X) :- fibo(N,_,X).

?- fib(1,X).
X=1.
true

Exercit¸iul 3: afisarea unui patrat de caractere
Scriet¸i un program ın Prolog pentru a afisa un patrat de n × n caractere
pe ecran.
Denumiti predicatul square/2. Primul argument este un numar natural
diferit de 0, iar al doilea un caracter care trebuie afisat.


line(0,_).
line(X,C):- X>0, Y is X-1, write(C), line(Y,C).

rectangle(0,_,_):-nl.
rectangle(X,Z,C):- X>0, Y is X-1, line(Z,C), nl, rectangle(Y,Z,C).
square(X,C) :- rectangle(X,X,C).

Exemplu:
?- square(5, ’* ’).


Exercit¸iul 4
A) Definiti un predicat all a/1 care primeste ca argument o lista ¸si care
verifica daca argumentul sau este format doar din a-uri.
?- all a([a,a,a,a]).
?- all a([a,a,A,a]).


all_a([]).
all_a([a|X]):-all_a(X).


B) Scrieti un predicat trans a b/2 care traduce o lista de a-uri ıntr-o
lista de b-uri. trans a b(X,Y) trebuie s˘a fie adevarat daca X este o lisa
de a-uri si Y este o lista de b-uri, iar cele doua liste au lungimi egale.

trans_a_b([],[]).
trans_a_b([a|X],[b|Y]):-trans_a_b(X,Y).


Exercitiul 5: Operatii cu vectori
A) Scrieti un predicat scalarMult/3, al carui prim argument este un
ıntreg, al doilea argument este o lista de ıntregi, iar al treilea argument
este rezultatul ınmultirii cu scalari al celui de-al doilea argument cu
primul.

scalarMult(_,[],[]).
scalarMult(N,[H|T],[X|Y]) :- X is N * H, scalarMult(N,T,Y).


B) Scrieti un predicat dot/3 al carui prim argument este o lista de
ıntregi, al doilea argument este o lista de ıntregi de lungimea primeia, iar
al treilea argument este produsul scalar dintre primele doua argumente.

dot([],[],0).
dot([H|T],[X|Y],M) :- dot(T,Y,N), M is N + H * X.

C) Scriet¸i un predicat max/2 care cauta elementul maxim ıntr-o lista de
numere naturale.


max([],0).
max([H|T],Y) :- max(T,Y), Y >= H.
max([H|T],H) :- max(T,Y), H > Y.